--- a/lib/python/site-packages/wsgiserver.py	2022-11-26 09:05:01.023814632 +0100
+++ b/lib/python/site-packages/wsgiserver.py	2022-11-26 09:06:47.322948956 +0100
@@ -1649,7 +1649,7 @@
         # Grow/shrink the pool if necessary.
         # Remove any dead threads from our list
         for t in self._threads:
-            if not t.isAlive():
+            if not t.is_alive():
                 self._threads.remove(t)
                 amount -= 1
 
@@ -1677,7 +1677,7 @@
             endtime = time.time() + timeout
         while self._threads:
             worker = self._threads.pop()
-            if worker is not current and worker.isAlive():
+            if worker is not current and worker.is_alive():
                 try:
                     if timeout is None or timeout < 0:
                         worker.join()
@@ -1685,7 +1685,7 @@
                         remaining_time = endtime - time.time()
                         if remaining_time > 0:
                             worker.join(remaining_time)
-                        if worker.isAlive():
+                        if worker.is_alive():
                             # We exhausted the timeout.
                             # Forcibly shut down the socket.
                             c = worker.conn
@@ -1776,9 +1776,9 @@
         if hasattr(ssl, 'create_default_context'):
             self.context = ssl.create_default_context(
                 purpose=ssl.Purpose.CLIENT_AUTH,
-                cafile=certificate_chain
+                cafile=self.certificate_chain
             )
-            self.context.load_cert_chain(certificate, private_key)
+            self.context.load_cert_chain(self.certificate, self.private_key)
 
     def bind(self, sock):
         """Wrap and return the given socket."""
